# Generated by Django 4.2 on 2024-10-14 23:04

import datetime
from django.utils import timezone
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.contrib.auth.models import BaseUserManager
from django.contrib.auth.hashers import make_password
import random


def random_days(min_days, max_days):
    """Return a random number of days between min_days and max_days."""
    return random.randint(min_days, max_days)



def create_users_profiles_tags_and_applications(apps, schema_editor):
    # Get the models
    User = apps.get_model('auth', 'User')
    
    # Create Admin User 
    email = "admin@email.com"
    username = "admin"
    password = "password123"

    user = User()
    user.email = BaseUserManager.normalize_email(email)
    user.password = make_password(password)
    user.username = username
    user.is_staff = True
    user.is_superuser = True
    user.save()
    
    Profile = apps.get_model('profiles', 'Profile')
    Tag = apps.get_model('job_application', 'Tag')
    JobApplication = apps.get_model('job_application', 'JobApplication')

    # User data
    users_data = [
        {"username": "user1", "password": "password123", "job_title": "Engineer", "reason_for_searching": "Looking for growth opportunities."},
        {"username": "user2", "password": "password123", "job_title": "Data Analyst", "reason_for_searching": "Seeking a career change."},
        {"username": "user3", "password": "password123", "job_title": "Project Manager", "reason_for_searching": "Exploring management roles."},
        {"username": "user4", "password": "password123", "job_title": "Software Developer", "reason_for_searching": "Wants to work on new projects."},
        {"username": "user5", "password": "password123", "job_title": "Designer", "reason_for_searching": "Interested in creative opportunities."},
        {"username": "user6", "password": "password123", "job_title": "Marketing Specialist", "reason_for_searching": "Exploring new market trends."}
    ]

    # Create users and profiles
    for user_data in users_data:
        if not User.objects.filter(username=user_data["username"]).exists():
            user = User.objects.create_user(username=user_data["username"], password=user_data["password"])
            Profile.objects.create(
                user=user,
                job_title=user_data["job_title"],
                reason_for_searching=user_data["reason_for_searching"],
                start_date=datetime.date.today(),
                follow_up_no_of_days=7  # Default
            )

    # Create tags
    tags_data = [
        {"name": "Remote", "color": "#FF5733"},
        {"name": "Hybrid", "color": "#33FF57"},
        {"name": "Freelancer", "color": "#3357FF"},
        {"name": "Onsite", "color": "#F1C40F"},
        {"name": "Consulting", "color": "#8E44AD"},
        {"name": "Contract", "color": "#E67E22"},
    ]

    tags = []
    for tag_data in tags_data:
        tag, created = Tag.objects.get_or_create(
            name=tag_data["name"],
            defaults={'color': tag_data["color"]}
        )
        tags.append(tag)
        
    STATUS_CHOICES = [
        'not_applied', 'applied', 'viewed', 'under_review',
        'assessment_scheduled', 'interview_scheduled', 'interview_completed',
        'follow_up', 'offer_extended', 'offer_accepted',
        'offer_declined', 'rejected', 'withdrawn', 'hired'
    ]
    
    # Define possible next stage preparations
    NEXT_STAGE_PREPS = [
        "Review resume and cover letter",
        "Prepare for technical interview",
        "Schedule a follow-up call",
        "Gather references",
        "Prepare questions for the interviewer",
        "Research the company and its culture",
        "Practice behavioral interview questions",
        "Complete the skills assessment",
        "Confirm interview time and place",
        "Prepare portfolio for review",
        "Review past projects and experiences",
        "Update LinkedIn profile",
        "Network with current employees",
        "Prepare salary negotiation points",
        "Create a list of personal achievements to discuss",
        "Plan follow-up after the interview",
    ]
    
    RECRUITER_NAMES = [
        "Alice Johnson", "Bob Smith", "Cathy Brown", "David Wilson",
        "Eve Davis", "Frank Clark", "Grace Lewis", "Henry Walker"
    ]

    MANAGER_NAMES = [
        "Isaac Hall", "Jack Martin", "Kathy Lee", "Laura Young",
        "Michael King", "Nina Scott", "Oliver White", "Pamela Harris"
    ]

    COMPANY_NAMES = [
        "Tech Innovations", "Data Solutions", "Creative Co", "Global Ventures",
        "NextGen Systems", "Future Insights", "Cloud Technologies", "Smart Enterprises"
    ]

    # Create job applications for each user
    job_titles = [
        "Software Engineer", "Data Scientist", "Product Manager",
        "Frontend Developer", "Backend Developer", "UX Designer",
        "Project Coordinator", "Data Analyst", "Systems Administrator",
        "Business Analyst", "Network Engineer", "Marketing Specialist",
        "Sales Executive", "HR Manager", "Content Writer",
        "Graphic Designer", "SEO Specialist", "Web Developer",
        "DevOps Engineer", "Technical Support", "Database Administrator"
    ]

    for user in User.objects.all():
        for _ in range(30):
            application_posted=datetime.date.today() - datetime.timedelta(days=random_days(8, 30))
            date_applied=application_posted + datetime.timedelta(days=random_days(0, 8))
            date_last_followup=date_applied + datetime.timedelta(days=random_days(0, 13))
            job_application = JobApplication(
                user=user,
                job_title=random.choice(job_titles),
                job_link_description="http://example.com/job",
                application_posted=application_posted,
                date_applied=date_applied,
                cv=None,  # Placeholder for CV file
                cover_letter=None,  # Placeholder for cover letter file
                date_last_followup=date_last_followup,
                recruiter_name=random.choice(RECRUITER_NAMES),
                recruiter_email="recruiter@example.com",
                manager_name=random.choice(MANAGER_NAMES),
                manager_email="manager@example.com",
                company_name=random.choice(COMPANY_NAMES),
                company_website="http://example.com",
                status=random.choice(STATUS_CHOICES),
                notes="Application submitted.",
                next_stage_date_time=timezone.now() + datetime.timedelta(days=random_days(1, 14)),
                next_stage_prep=random.choice(NEXT_STAGE_PREPS),
                salary=random.randint(50, 120) * 1000,
            )
            job_application.save()
            # Add random tags to job applications
            for tag in random.sample(tags, k=random.randint(1, len(tags))):  # Randomly select tags
                job_application.tags.add(tag)
                
                
class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(max_length=100)),
                ('start_date', models.DateField(default=datetime.date.today)),
                ('reason_for_searching', models.TextField()),
                ('follow_up_no_of_days', models.IntegerField(default=7)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(create_users_profiles_tags_and_applications),
    ]
