# Generated by Django 4.2 on 2024-10-17 13:52
from django.db import migrations, transaction, IntegrityError
from django.contrib.auth.models import User
from django.utils import timezone
import random

# Skills list as provided
skills_list = [
    "Python", "Django", "Flask", "JavaScript", "React", "Angular",
    "Node.js", "HTML", "CSS", "Git", "Docker", "Kubernetes",
    "REST API", "GraphQL", "SQL", "PostgreSQL", "MySQL", 
    "MongoDB", "Java", "C#", "Ruby", "Go", "Rust", "Swift",
    "Objective-C", "Machine Learning", "Deep Learning", 
    "Data Analysis", "Cloud Computing", "AWS", "Azure", 
    "GCP", "DevOps", "CI/CD", "Agile", "Scrum", "Test-Driven Development",
    "Software Development Life Cycle", "Microservices", "System Design",
    "UI/UX Design", "Data Structures", "Algorithms", "Network Security",
    "Cybersecurity", "Blockchain", "IoT", "AR/VR", "Big Data", 
    "Data Visualization", "Business Intelligence", "ERP Systems", 
    "CRM Systems", "Web Development", "Mobile Development", 
    "Game Development", "Content Management Systems", "SEO", "Digital Marketing"
]

def create_cv_data(apps, schema_editor):
    # Get model classes
    User = apps.get_model('auth', 'User')
    ContactDetails = apps.get_model('cv', 'ContactDetails')
    PersonalProfile = apps.get_model('cv', 'PersonalProfile')
    EducationItem = apps.get_model('cv', 'EducationItem')
    HackathonItem = apps.get_model('cv', 'HackathonItem')
    ProjectSkill = apps.get_model('cv', 'ProjectSkill')
    Project = apps.get_model('cv', 'Project')
    Job = apps.get_model('cv', 'Job')
    SoftSkill = apps.get_model('cv', 'SoftSkill')
    CV = apps.get_model('cv', 'CV')

    # Start a transaction block
    try:
        with transaction.atomic():
            # Retrieve the user with the username 'user2'
            user = User.objects.get(username='user2')

            # Create 4 CVs
            for i in range(4):
                # Create ContactDetails for this CV
                contact_details = ContactDetails.objects.create(
                    user=user,
                    name=f"User2 Full Name {i+1}",
                    linkedin_profile=f"https://linkedin.com/in/user2-{i+1}",
                    email=f"user2_{i+1}@example.com",
                    phone_number=f"555-010{i+1}",
                    location="Sample Location"
                )

                # Create a unique PersonalProfile for each CV
                personal_profile = PersonalProfile.objects.create(
                    user=user,
                    name=f"Developer Role {i+1}",
                    description=f"Experienced developer with a focus on {skills_list[i % len(skills_list)]} technologies."
                )

                # Create 3 unique EducationItems
                education_items = []
                for j in range(3):
                    education_items.append(EducationItem.objects.create(
                        user=user,
                        start_year=2015 + j,
                        end_year=2019 + j,
                        school=f"University {j+1}",
                        area_of_study=f"Computer Science {j+1}",
                        result="First Class"
                    ))

                # Create 3 unique HackathonItems
                hackathon_items = []
                for j in range(3):
                    hackathon_items.append(HackathonItem.objects.create(
                        user=user,
                        year_month=timezone.now().replace(year=2021-j, month=5-j),
                        github_link=f"https://github.com/user2-hackathon-{j+1}",
                        hosts=f"Host Organization {j+1}",
                        competition_name=f"Competition {j+1}",
                        role=f"Role {j+1}"
                    ))

                # Create 3 unique Projects, each with 2-3 random skills
                projects = []
                for j in range(3):
                    project = Project.objects.create(
                        user=user,
                        project_name=f"Project {j+1} for CV {i+1}",
                        live_link=f"https://live-project-{j+1}.com",
                        github_link=f"https://github.com/user2-project-{j+1}",
                        description=f"Description for project {j+1}, focused on {skills_list[i % len(skills_list)]}."
                    )
                    # Add 2-3 random skills to the project
                    skills = random.sample(skills_list, 3)
                    for skill_name in skills:
                        skill, created = ProjectSkill.objects.get_or_create(skill=skill_name)
                        project.skills.add(skill)
                    projects.append(project)

                # Create 4 unique Job experiences
                jobs = []
                for j in range(4):
                    jobs.append(Job.objects.create(
                        user=user,
                        job_title=f"Job Title {j+1}",
                        company=f"Company {j+1}",
                        start_date=timezone.now().replace(year=2018 - j, month=1),
                        end_date=timezone.now().replace(year=2019 - j, month=12),
                        bullet_point_1=f"Achieved milestone {j+1}",
                        bullet_point_2=f"Led a team of {j+2} engineers",
                        bullet_point_3=f"Developed core features {j+1}"
                    ))

                # Create 3 unique SoftSkills
                soft_skills = []
                for j in range(3):
                    soft_skills.append(SoftSkill.objects.create(
                        user=user,
                        group_name=f"Soft Skill {j+1}",
                        short_description=f"Description of soft skill {j+1}"
                    ))

                # Finally, create the CV and associate all the related objects
                cv = CV.objects.create(
                    user=user,
                    contact_details=contact_details,
                    personal_profile=personal_profile,
                )

                # Add the education items, hackathon items, projects, jobs, and soft skills to the CV
                cv.education_items.set(education_items)
                cv.hackathon_items.set(hackathon_items)
                cv.projects.set(projects)
                cv.jobs.set(jobs)
                cv.soft_skills.set(soft_skills)
    
    # Catch any exceptions that might occur during the transaction
    except IntegrityError:
        print("An error occurred during the migration process. The transaction has been rolled back.")


class Migration(migrations.Migration):

    dependencies = [
        ('cv', '0002_cv_created_at_personalprofile_name'),
    ]

    operations = [
        migrations.RunPython(create_cv_data),
    ]